// Code generated by MockGen. DO NOT EDIT.
// Source: ./token_exchange.go
//
// Generated by this command:
//
//	mockgen -source ./token_exchange.go -destination ./token_exchange_mock_test.go -package httpcontroller_test
//

// Package httpcontroller_test is a generated GoMock package.
package httpcontroller_test

import (
	context "context"
	reflect "reflect"

	services "github.com/DIMO-Network/token-exchange-api/internal/services"
	access "github.com/DIMO-Network/token-exchange-api/internal/services/access"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockDexService is a mock of DexService interface.
type MockDexService struct {
	ctrl     *gomock.Controller
	recorder *MockDexServiceMockRecorder
	isgomock struct{}
}

// MockDexServiceMockRecorder is the mock recorder for MockDexService.
type MockDexServiceMockRecorder struct {
	mock *MockDexService
}

// NewMockDexService creates a new mock instance.
func NewMockDexService(ctrl *gomock.Controller) *MockDexService {
	mock := &MockDexService{ctrl: ctrl}
	mock.recorder = &MockDexServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDexService) EXPECT() *MockDexServiceMockRecorder {
	return m.recorder
}

// SignPrivilegePayload mocks base method.
func (m *MockDexService) SignPrivilegePayload(ctx context.Context, req services.PrivilegeTokenDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignPrivilegePayload", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignPrivilegePayload indicates an expected call of SignPrivilegePayload.
func (mr *MockDexServiceMockRecorder) SignPrivilegePayload(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignPrivilegePayload", reflect.TypeOf((*MockDexService)(nil).SignPrivilegePayload), ctx, req)
}

// MockAccessService is a mock of AccessService interface.
type MockAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceMockRecorder
	isgomock struct{}
}

// MockAccessServiceMockRecorder is the mock recorder for MockAccessService.
type MockAccessServiceMockRecorder struct {
	mock *MockAccessService
}

// NewMockAccessService creates a new mock instance.
func NewMockAccessService(ctrl *gomock.Controller) *MockAccessService {
	mock := &MockAccessService{ctrl: ctrl}
	mock.recorder = &MockAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessService) EXPECT() *MockAccessServiceMockRecorder {
	return m.recorder
}

// ValidateAccess mocks base method.
func (m *MockAccessService) ValidateAccess(ctx context.Context, req *access.NFTAccessRequest, ethAddr common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccess", ctx, req, ethAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAccess indicates an expected call of ValidateAccess.
func (mr *MockAccessServiceMockRecorder) ValidateAccess(ctx, req, ethAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccess", reflect.TypeOf((*MockAccessService)(nil).ValidateAccess), ctx, req, ethAddr)
}
