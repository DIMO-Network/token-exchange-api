// Code generated by MockGen. DO NOT EDIT.
// Source: ./token_exchange.go
//
// Generated by this command:
//
//	mockgen -source ./token_exchange.go -destination mocks/token_exchange_mock.go -package mock_controller_test
//

// Package mock_controller_test is a generated GoMock package.
package mock_controller_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPFSService is a mock of IPFSService interface.
type MockIPFSService struct {
	ctrl     *gomock.Controller
	recorder *MockIPFSServiceMockRecorder
	isgomock struct{}
}

// MockIPFSServiceMockRecorder is the mock recorder for MockIPFSService.
type MockIPFSServiceMockRecorder struct {
	mock *MockIPFSService
}

// NewMockIPFSService creates a new mock instance.
func NewMockIPFSService(ctrl *gomock.Controller) *MockIPFSService {
	mock := &MockIPFSService{ctrl: ctrl}
	mock.recorder = &MockIPFSServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPFSService) EXPECT() *MockIPFSServiceMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockIPFSService) Fetch(ctx context.Context, cid string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, cid)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockIPFSServiceMockRecorder) Fetch(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockIPFSService)(nil).Fetch), ctx, cid)
}
