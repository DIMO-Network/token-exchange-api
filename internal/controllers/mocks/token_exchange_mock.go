// Code generated by MockGen. DO NOT EDIT.
// Source: token_exchange.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPFSService is a mock of IPFSService interface.
type MockIPFSService struct {
	ctrl     *gomock.Controller
	recorder *MockIPFSServiceMockRecorder
}

// MockIPFSServiceMockRecorder is the mock recorder for MockIPFSService.
type MockIPFSServiceMockRecorder struct {
	mock *MockIPFSService
}

// NewMockIPFSService creates a new mock instance.
func NewMockIPFSService(ctrl *gomock.Controller) *MockIPFSService {
	mock := &MockIPFSService{ctrl: ctrl}
	mock.recorder = &MockIPFSServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPFSService) EXPECT() *MockIPFSServiceMockRecorder {
	return m.recorder
}

// FetchFromIPFS mocks base method.
func (m *MockIPFSService) FetchFromIPFS(ctx context.Context, cid string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromIPFS", ctx, cid)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFromIPFS indicates an expected call of FetchFromIPFS.
func (mr *MockIPFSServiceMockRecorder) FetchFromIPFS(ctx, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromIPFS", reflect.TypeOf((*MockIPFSService)(nil).FetchFromIPFS), ctx, cid)
}
