// Code generated by MockGen. DO NOT EDIT.
// Source: users_service.go
//
// Generated by this command:
//
//	mockgen -source users_service.go -destination mocks/users_service_mock.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	grpc "github.com/DIMO-Network/users-api/pkg/grpc"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersService is a mock of UsersService interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
	isgomock struct{}
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// GetUserByEthAddr mocks base method.
func (m *MockUsersService) GetUserByEthAddr(ctx context.Context, ethAddr common.Address) (*grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEthAddr", ctx, ethAddr)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEthAddr indicates an expected call of GetUserByEthAddr.
func (mr *MockUsersServiceMockRecorder) GetUserByEthAddr(ctx, ethAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEthAddr", reflect.TypeOf((*MockUsersService)(nil).GetUserByEthAddr), ctx, ethAddr)
}

// GetUserByID mocks base method.
func (m *MockUsersService) GetUserByID(ctx context.Context, userID string) (*grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUsersServiceMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUsersService)(nil).GetUserByID), ctx, userID)
}
