// Code generated by MockGen. DO NOT EDIT.
// Source: ./access.go
//
// Generated by this command:
//
//	mockgen -source ./access.go -destination ./access_mock_test.go -package access_test
//

// Package access_test is a generated GoMock package.
package access_test

import (
	context "context"
	big "math/big"
	reflect "reflect"

	sacd "github.com/DIMO-Network/token-exchange-api/internal/contracts/sacd"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockSACDInterface is a mock of SACDInterface interface.
type MockSACDInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSACDInterfaceMockRecorder
	isgomock struct{}
}

// MockSACDInterfaceMockRecorder is the mock recorder for MockSACDInterface.
type MockSACDInterfaceMockRecorder struct {
	mock *MockSACDInterface
}

// NewMockSACDInterface creates a new mock instance.
func NewMockSACDInterface(ctrl *gomock.Controller) *MockSACDInterface {
	mock := &MockSACDInterface{ctrl: ctrl}
	mock.recorder = &MockSACDInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSACDInterface) EXPECT() *MockSACDInterfaceMockRecorder {
	return m.recorder
}

// CurrentPermissionRecord mocks base method.
func (m *MockSACDInterface) CurrentPermissionRecord(opts *bind.CallOpts, asset common.Address, tokenID *big.Int, grantee common.Address) (sacd.ISacdPermissionRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentPermissionRecord", opts, asset, tokenID, grantee)
	ret0, _ := ret[0].(sacd.ISacdPermissionRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentPermissionRecord indicates an expected call of CurrentPermissionRecord.
func (mr *MockSACDInterfaceMockRecorder) CurrentPermissionRecord(opts, asset, tokenID, grantee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentPermissionRecord", reflect.TypeOf((*MockSACDInterface)(nil).CurrentPermissionRecord), opts, asset, tokenID, grantee)
}

// GetPermissions mocks base method.
func (m *MockSACDInterface) GetPermissions(opts *bind.CallOpts, asset common.Address, tokenID *big.Int, grantee common.Address, permissions *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", opts, asset, tokenID, grantee, permissions)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockSACDInterfaceMockRecorder) GetPermissions(opts, asset, tokenID, grantee, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockSACDInterface)(nil).GetPermissions), opts, asset, tokenID, grantee, permissions)
}

// MockIPFSClient is a mock of IPFSClient interface.
type MockIPFSClient struct {
	ctrl     *gomock.Controller
	recorder *MockIPFSClientMockRecorder
	isgomock struct{}
}

// MockIPFSClientMockRecorder is the mock recorder for MockIPFSClient.
type MockIPFSClientMockRecorder struct {
	mock *MockIPFSClient
}

// NewMockIPFSClient creates a new mock instance.
func NewMockIPFSClient(ctrl *gomock.Controller) *MockIPFSClient {
	mock := &MockIPFSClient{ctrl: ctrl}
	mock.recorder = &MockIPFSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPFSClient) EXPECT() *MockIPFSClientMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockIPFSClient) Fetch(ctx context.Context, cid string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, cid)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockIPFSClientMockRecorder) Fetch(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockIPFSClient)(nil).Fetch), ctx, cid)
}
