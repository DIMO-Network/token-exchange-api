// Code generated by MockGen. DO NOT EDIT.
// Source: ./template.go
//
// Generated by this command:
//
//	mockgen -source ./template.go -destination ./template_mock_test.go -package template
//

// Package template is a generated GoMock package.
package template

import (
	context "context"
	json "encoding/json"
	big "math/big"
	reflect "reflect"

	template "github.com/DIMO-Network/token-exchange-api/internal/contracts/template"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplateInterface is a mock of TemplateInterface interface.
type MockTemplateInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateInterfaceMockRecorder
	isgomock struct{}
}

// MockTemplateInterfaceMockRecorder is the mock recorder for MockTemplateInterface.
type MockTemplateInterfaceMockRecorder struct {
	mock *MockTemplateInterface
}

// NewMockTemplateInterface creates a new mock instance.
func NewMockTemplateInterface(ctrl *gomock.Controller) *MockTemplateInterface {
	mock := &MockTemplateInterface{ctrl: ctrl}
	mock.recorder = &MockTemplateInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateInterface) EXPECT() *MockTemplateInterfaceMockRecorder {
	return m.recorder
}

// Templates mocks base method.
func (m *MockTemplateInterface) Templates(opts *bind.CallOpts, templateId *big.Int) (template.ITemplateTemplateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Templates", opts, templateId)
	ret0, _ := ret[0].(template.ITemplateTemplateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Templates indicates an expected call of Templates.
func (mr *MockTemplateInterfaceMockRecorder) Templates(opts, templateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Templates", reflect.TypeOf((*MockTemplateInterface)(nil).Templates), opts, templateId)
}

// MockIPFSClient is a mock of IPFSClient interface.
type MockIPFSClient struct {
	ctrl     *gomock.Controller
	recorder *MockIPFSClientMockRecorder
	isgomock struct{}
}

// MockIPFSClientMockRecorder is the mock recorder for MockIPFSClient.
type MockIPFSClientMockRecorder struct {
	mock *MockIPFSClient
}

// NewMockIPFSClient creates a new mock instance.
func NewMockIPFSClient(ctrl *gomock.Controller) *MockIPFSClient {
	mock := &MockIPFSClient{ctrl: ctrl}
	mock.recorder = &MockIPFSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPFSClient) EXPECT() *MockIPFSClientMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockIPFSClient) Fetch(ctx context.Context, cid string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, cid)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockIPFSClientMockRecorder) Fetch(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockIPFSClient)(nil).Fetch), ctx, cid)
}

// MockSignatureValidator is a mock of SignatureValidator interface.
type MockSignatureValidator struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureValidatorMockRecorder
	isgomock struct{}
}

// MockSignatureValidatorMockRecorder is the mock recorder for MockSignatureValidator.
type MockSignatureValidatorMockRecorder struct {
	mock *MockSignatureValidator
}

// NewMockSignatureValidator creates a new mock instance.
func NewMockSignatureValidator(ctrl *gomock.Controller) *MockSignatureValidator {
	mock := &MockSignatureValidator{ctrl: ctrl}
	mock.recorder = &MockSignatureValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureValidator) EXPECT() *MockSignatureValidatorMockRecorder {
	return m.recorder
}

// ValidateSignature mocks base method.
func (m *MockSignatureValidator) ValidateSignature(ctx context.Context, payload json.RawMessage, signature string, ethAddr common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSignature", ctx, payload, signature, ethAddr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSignature indicates an expected call of ValidateSignature.
func (mr *MockSignatureValidatorMockRecorder) ValidateSignature(ctx, payload, signature, ethAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSignature", reflect.TypeOf((*MockSignatureValidator)(nil).ValidateSignature), ctx, payload, signature, ethAddr)
}
